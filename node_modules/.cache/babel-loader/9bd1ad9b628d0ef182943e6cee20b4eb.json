{"ast":null,"code":"import { db } from '../../firebase';\nimport { collection, doc, getDoc, getDocs, addDoc, updateDoc, delteDOc } from 'firebase/firestore'; // const query = await getDocs(collection(db, 'wordBoo'));\n// query.forEach((doc) => {\n//   console.log(doc.id, doc.data());\n// });\n// addDoc(collection(db, 'wordBook'), {\n//   word: 'newWord',\n//   desc: 'newDesc',\n//   example: 'newExample',\n// });\n// const docRef = doc(db, 'wordBook', 'qioWkr5TEzySCbMqRKME');\n// updateDoc(docRef, { word: 'oldWord' });\n// const docRef = doc(db, 'wordBook', 'qioWkr5TEzySCbMqRKME');\n// deleteDoc(docRef)\n//  addDoc(collection(db, 'wordBooks'), {\n//   word: 'newWord',\n//   desc: 'newDesc',\n//   example: 'newExample',\n// });\n// Actions\n\nconst LOAD = 'wordBooks/LOAD';\nconst CREATE = 'wordBooks/CREATE';\nconst UPDATE = 'wordBooks/UPDATE';\nconst REMOVE = 'wordBooks/REMOVE'; //initial State\n\nconst initialState = {\n  list: [{\n    word: 'word',\n    desc: 'desc',\n    example: 'example'\n  }]\n}; // Action Creators\n\nexport function loadWordBook(wordBook_list) {\n  return {\n    type: LOAD,\n    wordBook_list\n  };\n}\nexport function createWordBook(wordBook) {\n  return {\n    type: CREATE,\n    wordBook\n  };\n}\nexport function updateWordBook(wordBooks) {\n  return {\n    type: UPDATE,\n    wordBooks\n  };\n}\nexport function removeWordBook(index) {\n  return {\n    type: REMOVE,\n    index\n  };\n} //middleware\n\nexport const loadWordBookFB = () => {\n  return async function (dispatch) {\n    const wordBook_data = await getDocs(collection(db, 'wordBook'));\n    let wordBook_list = [];\n    wordBook_data.forEach(doc => {\n      console.log(doc.id, doc.data());\n      wordBook_list.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    console.log(wordBook_list);\n  };\n}; // Reducer\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    // do reducer stuff\n    case CREATE:\n      {\n        const new_wordBook_list = [...state.list, action.wordBook];\n        return {\n          list: new_wordBook_list\n        };\n      }\n\n    case UPDATE:\n      {\n        const new_wordBook_list = action.wordBooks;\n        return {\n          list: new_wordBook_list\n        };\n      }\n\n    case REMOVE:\n      {\n        const index = action.index;\n        const new_wordBook_list = state.list.filter((item, i) => i !== index);\n        return {\n          list: new_wordBook_list\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/HHS/Documents/git/wordbook/src/redux/modules/wordBook.js"],"names":["db","collection","doc","getDoc","getDocs","addDoc","updateDoc","delteDOc","LOAD","CREATE","UPDATE","REMOVE","initialState","list","word","desc","example","loadWordBook","wordBook_list","type","createWordBook","wordBook","updateWordBook","wordBooks","removeWordBook","index","loadWordBookFB","dispatch","wordBook_data","forEach","console","log","id","data","push","reducer","state","action","new_wordBook_list","filter","item","i"],"mappings":"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","sourcesContent":["import { db } from '../../firebase';\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  addDoc,\r\n  updateDoc,\r\n  delteDOc,\r\n} from 'firebase/firestore';\r\n\r\n// const query = await getDocs(collection(db, 'wordBoo'));\r\n// query.forEach((doc) => {\r\n//   console.log(doc.id, doc.data());\r\n// });\r\n// addDoc(collection(db, 'wordBook'), {\r\n//   word: 'newWord',\r\n//   desc: 'newDesc',\r\n//   example: 'newExample',\r\n// });\r\n// const docRef = doc(db, 'wordBook', 'qioWkr5TEzySCbMqRKME');\r\n// updateDoc(docRef, { word: 'oldWord' });\r\n// const docRef = doc(db, 'wordBook', 'qioWkr5TEzySCbMqRKME');\r\n// deleteDoc(docRef)\r\n//  addDoc(collection(db, 'wordBooks'), {\r\n//   word: 'newWord',\r\n//   desc: 'newDesc',\r\n//   example: 'newExample',\r\n// });\r\n\r\n// Actions\r\nconst LOAD = 'wordBooks/LOAD';\r\nconst CREATE = 'wordBooks/CREATE';\r\nconst UPDATE = 'wordBooks/UPDATE';\r\nconst REMOVE = 'wordBooks/REMOVE';\r\n\r\n//initial State\r\nconst initialState = {\r\n  list: [{ word: 'word', desc: 'desc', example: 'example' }],\r\n};\r\n\r\n// Action Creators\r\nexport function loadWordBook(wordBook_list) {\r\n  return { type: LOAD, wordBook_list };\r\n}\r\n\r\nexport function createWordBook(wordBook) {\r\n  return { type: CREATE, wordBook };\r\n}\r\n\r\nexport function updateWordBook(wordBooks) {\r\n  return { type: UPDATE, wordBooks };\r\n}\r\n\r\nexport function removeWordBook(index) {\r\n  return { type: REMOVE, index };\r\n}\r\n\r\n//middleware\r\nexport const loadWordBookFB = () => {\r\n  return async function (dispatch) {\r\n    const wordBook_data = await getDocs(collection(db, 'wordBook'));\r\n\r\n    let wordBook_list = [];\r\n\r\n    wordBook_data.forEach((doc) => {\r\n      console.log(doc.id, doc.data());\r\n      wordBook_list.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    console.log(wordBook_list);\r\n  };\r\n};\r\n\r\n// Reducer\r\nexport default function reducer(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    // do reducer stuff\r\n    case CREATE: {\r\n      const new_wordBook_list = [...state.list, action.wordBook];\r\n      return { list: new_wordBook_list };\r\n    }\r\n    case UPDATE: {\r\n      const new_wordBook_list = action.wordBooks;\r\n      return { list: new_wordBook_list };\r\n    }\r\n    case REMOVE: {\r\n      const index = action.index;\r\n      const new_wordBook_list = state.list.filter((item, i) => i !== index);\r\n      return { list: new_wordBook_list };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}